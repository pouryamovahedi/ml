import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

df1 = pd.read_csv("results.csv")
df2 = pd.read_csv("races.csv")
df3 = pd.read_csv("drivers.csv")

merge_attempt = pd.merge(df1, df2, how='inner', on=['raceId'])
merge_attempt = pd.merge(merge_attempt, df3, how='inner', on=['driverId'])

merge_attempt['fastestLapTime_seconds'] = pd.to_datetime(merge_attempt['fastestLapTime']).dt.second

merge_attempt = merge_attempt.dropna(subset=['grid', 'position_y', 'fastestLapSpeed', 'fastestLapTime_seconds'])

scaler = StandardScaler()
merge_attempt[['grid', 'fastestLapSpeed', 'fastestLapTime_seconds']] = scaler.fit_transform(merge_attempt[['grid', 'fastestLapSpeed', 'fastestLapTime_seconds']])

X = merge_attempt[['grid', 'fastestLapSpeed', 'fastestLapTime_seconds']]
y = merge_attempt['position_y']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lin_reg = LinearRegression()
lin_reg_scores = cross_val_score(lin_reg, X, y, cv=5)
print(f"Linear Regression Cross Validation Score: {lin_reg_scores.mean()}")

tree_reg = DecisionTreeRegressor()
parameters = {'max_depth':[5,10,15,20], 'min_samples_leaf':[2,5,10,20]}
grid_search = GridSearchCV(tree_reg, parameters, cv=5)
grid_search.fit(X_train, y_train)
print(f"Best parameters for Decision Tree: {grid_search.best_params_}")
print(f"Decision Tree Regression Cross Validation Score: {grid_search.best_score_}")

forest_reg = RandomForestRegressor(n_estimators=100, random_state=42)
forest_reg_scores = cross_val_score(forest_reg, X, y, cv=5)
print(f"Random Forest Regression Cross Validation Score: {forest_reg_scores.mean()}")

# Visualizing
fig, ax = plt.subplots(1, 3, figsize=(15, 5))

sns.heatmap(merge_attempt[['grid', 'fastestLapSpeed', 'fastestLapTime_seconds', 'position_y']].corr(), annot=True, ax=ax[0])
ax[0].set_title("Correlation Matrix")

sns.scatterplot(x='grid', y='position_y', data=merge_attempt, ax=ax[1])
ax[1].set_title("Grid vs Position")

sns.scatterplot(x='fastestLapSpeed', y='position_y', data=merge_attempt, ax=ax[2])
ax[2].set_title("Fastest Lap Speed vs Position")

plt.tight_layout()
plt.show()
